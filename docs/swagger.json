{
  "openapi": "3.1.0",
  "info": {
    "version": "1.0.0",
    "title": "Byte&Bite-v2.0 app",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "description": "A RESTful API for managing recipes. Supports user registration, authentication, and password reset via email.\n"
  },
  "servers": [
    {
      "url": "https://byte-bite-v2-0.onrender.com/api",
      "description": "Production server"
    },
    {
      "url": "http://127.0.0.1:3000/api",
      "description": "Local server"
    }
  ],
  "tags": [
    {
      "name": "Categories",
      "description": "Operations about categories."
    },
    {
      "name": "Ingredients",
      "description": "Operations about ingredients."
    },
    {
      "name": "Recipes",
      "description": "Operations about recipes."
    },
    {
      "name": "Auth",
      "description": "Auth operations."
    },
    {
      "name": "Users",
      "description": "Operations about users."
    }
  ],
  "paths": {
    "/auth/register": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Register user",
        "operationId": "createUser",
        "description": "Registers a new user account and returns access token with user data",
        "security": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "email",
                  "password"
                ],
                "properties": {
                  "name": {
                    "description": "User's name",
                    "type": "string",
                    "maxLength": 16,
                    "example": "John Doe"
                  },
                  "email": {
                    "description": "User's email",
                    "type": "string",
                    "maxLength": 128,
                    "example": "john123@gmail.com"
                  },
                  "password": {
                    "description": "User's password",
                    "type": "string",
                    "minLength": 8,
                    "maxLength": 128,
                    "example": "examplepwd123"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully registered a user and returned access token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 201
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully registered a user!"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "user",
                        "accessToken"
                      ],
                      "properties": {
                        "user": {
                          "$ref": "#/components/schemas/user"
                        },
                        "accessToken": {
                          "type": "string",
                          "example": "msCUebr6BGhZcOO0qNLU6JbWd0AdmBKYadwnknjq"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Login user",
        "operationId": "loginUser",
        "description": "Authenticate an existing user and return access token with user data",
        "security": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password"
                ],
                "properties": {
                  "email": {
                    "description": "User's email",
                    "type": "string",
                    "maxLength": 128,
                    "example": "john123@gmail.com"
                  },
                  "password": {
                    "description": "User's password",
                    "type": "string",
                    "minLength": 8,
                    "maxLength": 128,
                    "example": "examplepwd123"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully authenticated the user and returned an access token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully logged in a user!"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "user",
                        "accessToken"
                      ],
                      "properties": {
                        "user": {
                          "$ref": "#/components/schemas/user"
                        },
                        "accessToken": {
                          "type": "string",
                          "example": "msCUebr6BGhZcOO0qNLU6JbWd0AdmBKYadwnknjq"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Logout user",
        "operationId": "logoutUser",
        "description": "Logs out the authenticated user by deleting the session.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully logged out. No content is returned."
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/auth/refresh": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Refresh session",
        "operationId": "refreshSession",
        "description": "Refreshes the user's session by issuing a new access token and updating session cookies.\n\n⚠️ **Swagger UI does not store cookies. Please use Postman or your frontend to test this route properly.**\n",
        "security": [],
        "responses": {
          "200": {
            "description": "Successfully refreshed the session and returned a new access token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully refreshed a session!"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "accessToken"
                      ],
                      "properties": {
                        "accessToken": {
                          "type": "string",
                          "example": "msCUebr6BGhZcOO0qNLU6JbWd0AdmBKYadwnknjq"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users/current": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get current user",
        "operationId": "getCurrentUser",
        "description": "Returns the currently authenticated user's information",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved current user data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully found user!"
                    },
                    "data": {
                      "$ref": "#/components/schemas/user"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/categories": {
      "get": {
        "operationId": "getCategories",
        "summary": "Retrieve recipe category list",
        "tags": [
          "Categories"
        ],
        "description": "Returns an array of recipe categories. If no categories are found, a 404 error is returned.",
        "security": [],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of categories",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully found categories!"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/category"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "No categories found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "No categories found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal server error: Database connection failed"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/ingredients": {
      "get": {
        "operationId": "getIngredients",
        "summary": "Retrieve a list of ingredients",
        "tags": [
          "Ingredients"
        ],
        "description": "Returns an array of ingredients. Returns 404 if no ingredients found.",
        "security": [],
        "responses": {
          "200": {
            "description": "Successfully retrieved list of ingredients",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully found ingredients!"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ingredient"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Ingredients not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "No ingredients found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal server error: Database connection failed"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/recipes": {
      "get": {
        "tags": [
          "Recipes"
        ],
        "summary": "Get filtered and paginated list of recipes",
        "operationId": "getRecipes",
        "description": "Get a list of recipes with filtering, sorting, pagination, and favorite status support. If the user is authenticated, each recipe will include an `isFavorite` boolean field indicating whether the recipe is in the user's favorites.\n**Example request:**   ` GET http://localhost:3000/api/recipes?ingredient=640c2dd963a319ea671e37c2&category=Beef&sortBy=title&sortOrder=desc&page=1&limit=5`\n",
        "security": [],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "example": 1
            },
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "perPage",
            "schema": {
              "type": "integer",
              "example": 10
            },
            "description": "Number of items per page"
          },
          {
            "in": "query",
            "name": "category",
            "schema": {
              "type": "string",
              "example": "dessert"
            },
            "description": "Filter by category"
          },
          {
            "in": "query",
            "name": "ingredient",
            "schema": {
              "type": "string",
              "example": "chocolate"
            },
            "description": "Filter by ingredient"
          },
          {
            "in": "query",
            "name": "title",
            "schema": {
              "type": "string",
              "example": "Japanese gohan rice"
            },
            "description": "Filter by recipe title"
          },
          {
            "in": "query",
            "name": "sortBy",
            "schema": {
              "type": "string",
              "example": "title"
            },
            "description": "Field name to sort by (e.g. `title`, `createdAt`)"
          },
          {
            "in": "query",
            "name": "sortOrder",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "example": "asc"
            },
            "description": "Sort order — ascending (`asc`) or descending (`desc`)"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully found recipes!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully found recipes!"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "recipes",
                        "page",
                        "perPage",
                        "totalItems",
                        "totalPages",
                        "hasPreviousPage",
                        "hasNextPage"
                      ],
                      "properties": {
                        "recipes": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/recipe"
                          }
                        },
                        "page": {
                          "type": "integer",
                          "example": 1
                        },
                        "perPage": {
                          "type": "integer",
                          "example": 10
                        },
                        "totalItems": {
                          "type": "integer",
                          "example": 45
                        },
                        "totalPages": {
                          "type": "integer",
                          "example": 5
                        },
                        "hasPreviousPage": {
                          "type": "boolean",
                          "example": false
                        },
                        "hasNextPage": {
                          "type": "boolean",
                          "example": true
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "Recipes"
        ],
        "summary": "Create a new recipe",
        "operationId": "createRecipe",
        "description": "Create a new recipe with the provided data. Authentication is required.\nIf a photo file is included, it will be uploaded and its URL saved in the `thumb` field.\nThe `time` field is provided as a number but stored as a string in the database.\nThe optional `cals` field can also be provided as a number.\n",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "title",
                  "category",
                  "instructions",
                  "description",
                  "time",
                  "ingredients"
                ],
                "properties": {
                  "title": {
                    "type": "string",
                    "maxLength": 64,
                    "example": "Steak Diane"
                  },
                  "category": {
                    "type": "string",
                    "example": "Beef"
                  },
                  "area": {
                    "type": "string",
                    "example": "French"
                  },
                  "instructions": {
                    "type": "string",
                    "maxLength": 1200,
                    "example": "Heat oil in a skillet over medium-high heat..."
                  },
                  "description": {
                    "type": "string",
                    "maxLength": 200,
                    "example": "A classic French dish made with pan-seared steak..."
                  },
                  "time": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 360,
                    "example": 30,
                    "description": "Preparation time in minutes (number input, stored as string)"
                  },
                  "cals": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 10000,
                    "example": 400,
                    "description": "Caloric content (optional)"
                  },
                  "thumb": {
                    "type": "string",
                    "format": "binary",
                    "description": "Recipe photo file"
                  },
                  "ingredients": {
                    "type": "array",
                    "minItems": 2,
                    "maxItems": 16,
                    "description": "List of ingredients with measure and id",
                    "items": {
                      "type": "object",
                      "required": [
                        "id",
                        "measure"
                      ],
                      "properties": {
                        "id": {
                          "type": "string",
                          "example": "640c2dd963a319ea671e36c3"
                        },
                        "measure": {
                          "type": "string",
                          "example": "2 tbs"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully created a new recipe!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 201
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully created a new recipe!"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "recipes"
                      ],
                      "properties": {
                        "recipes": {
                          "$ref": "#/components/schemas/recipe"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation failed due to incorrect request data.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Validation failed"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "message",
                        "errors"
                      ],
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "Validation failed"
                        },
                        "errors": {
                          "type": "array",
                          "description": "Array of validation error messages",
                          "items": {
                            "type": "string",
                            "example": "-time- is required"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/recipes/{id}": {
      "get": {
        "tags": [
          "Recipes"
        ],
        "summary": "Get a single recipe by its ID",
        "operationId": "getRecipeById",
        "description": "Retrieve detailed information about a specific recipe using its unique ID.\nOptionally supports authentication — if a valid access token is provided, the response will include a `isFavorite` field indicating whether the recipe is in the user's favorites list.\n\n**Example request:**\n`GET http://localhost:3000/api/recipes/6462a8f74c3d0ddd28898016`\n",
        "security": [],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "65d7e8a4b9c3d12a5d8e9b74"
            },
            "description": "Pass only the recipe ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Recipe found successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "recipes",
                    "isFavorite"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Recipe found successfully"
                    },
                    "recipes": {
                      "$ref": "#/components/schemas/recipe"
                    },
                    "isFavorite": {
                      "type": "boolean",
                      "example": true
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid recipe ID format",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid recipe ID format"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Recipe not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Recipe not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/recipes/profile/own": {
      "get": {
        "tags": [
          "Recipes"
        ],
        "summary": "Get all recipes added by the user with pagination, sorting, and filtering",
        "operationId": "getMyRecipes",
        "description": "Retrieve all recipes added by the authenticated user with support for pagination, sorting, and filtering.\nThe response includes pagination info:\n  \"page\": 1,\n  \"perPage\": 12,\n  \"totalItems\": 4,\n  \"totalPages\": 1,\n  \"hasPreviousPage\": false,\n  \"hasNextPage\": false\n\nSorting is supported on the following fields:\n_id, name, cals, time, category, createdAt, updatedAt\n\nFiltering can be done by:\n- name (partial or full match)\n- category\n- isFavorite (whether the recipe is marked as favorite by the user)\n",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "sortBy",
            "schema": {
              "type": "string",
              "enum": [
                "_id",
                "title",
                "cals",
                "time",
                "category",
                "createdAt",
                "updatedAt"
              ],
              "default": "createdAt"
            },
            "description": "Field to sort by"
          },
          {
            "in": "query",
            "name": "sortOrder",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            },
            "description": "Sort order:ascending or descending"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "example": 1,
              "minimum": 1
            },
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "perPage",
            "schema": {
              "type": "integer",
              "example": 10,
              "minimum": 1,
              "maximum": 100
            },
            "description": "Number of items per page"
          },
          {
            "in": "query",
            "name": "category",
            "schema": {
              "type": "string",
              "example": "dessert"
            },
            "description": "Filter by category"
          },
          {
            "in": "query",
            "name": "ingredient",
            "schema": {
              "type": "string",
              "example": "chocolate"
            },
            "description": "Filter by ingredient"
          },
          {
            "in": "query",
            "name": "title",
            "schema": {
              "type": "string",
              "example": "Japanese gohan rice"
            },
            "description": "Filter by recipe name"
          }
        ],
        "responses": {
          "200": {
            "description": "Recipe found successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data",
                    "isFavorite"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Recipe found successfully"
                    },
                    "data": {
                      "$ref": "#/components/schemas/recipe"
                    },
                    "isFavorite": {
                      "type": "boolean",
                      "example": true
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/recipes/profile/own/{id}": {
      "delete": {
        "tags": [
          "Recipes"
        ],
        "summary": "Remove a user's own recipe",
        "operationId": "removeMyRecipe",
        "description": "Marks the user's own recipe as removed by setting its `owner` field to null. This effectively detaches the recipe from the authenticated user, while keeping it in the database. Requires authentication.\n",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the recipe to remove from user's profile",
            "required": true,
            "schema": {
              "type": "string",
              "example": "60a7c0f2e13e3a3d9c1f1234"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Recipe successfully removed from user's profile",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Recipe successfully removed from your profile"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "recipeId": {
                          "type": "string",
                          "example": "60a7c0f2e13e3a3d9c1f1234"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "description": "User attempted to delete a recipe they do not own",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "integer",
                      "example": 403
                    },
                    "message": {
                      "type": "string",
                      "example": "You can only remove your own recipe"
                    },
                    "error": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/recipes/profile/favorites": {
      "get": {
        "tags": [
          "Recipes"
        ],
        "summary": "Get favorite recipes of the authenticated user",
        "operationId": "getFavorites",
        "description": "Retrieve a paginated, filtered, and sorted list of recipes that the authenticated user has marked as favorites.\nThis endpoint allows the user to:\n- Get only their favorite recipes. - Apply **pagination** using `page` and `perPage` parameters. - Filter recipes by **category**, **title**, or **ingredient**. - Sort recipes using standard fields (`sortBy`, `sortOrder`) if available in query options. - Recipes are returned in the **exact order** they were added to favorites by the user.\nUseful for rendering a user's personal favorites list with proper control over display and filtering.\n",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "example": 1
            },
            "description": "Page number for pagination (starts from 1)"
          },
          {
            "in": "query",
            "name": "perPage",
            "schema": {
              "type": "integer",
              "example": 10
            },
            "description": "Number of items per page"
          },
          {
            "in": "query",
            "name": "category",
            "schema": {
              "type": "string",
              "example": "dessert"
            },
            "description": "Filter recipes by category"
          },
          {
            "in": "query",
            "name": "ingredient",
            "schema": {
              "type": "string",
              "example": "chocolate"
            },
            "description": "Filter recipes by a specific ingredient"
          },
          {
            "in": "query",
            "name": "title",
            "schema": {
              "type": "string",
              "example": "Japanese gohan rice"
            },
            "description": "Filter recipes by title (case-insensitive match)"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved favorite recipes",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully retrieved favorite recipes"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "recipes",
                        "page",
                        "perPage",
                        "totalItems",
                        "totalPages",
                        "hasPreviousPage",
                        "hasNextPage"
                      ],
                      "properties": {
                        "recipes": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/recipe"
                          }
                        },
                        "page": {
                          "type": "integer",
                          "example": 1
                        },
                        "perPage": {
                          "type": "integer",
                          "example": 12
                        },
                        "totalItems": {
                          "type": "integer",
                          "example": 34
                        },
                        "totalPages": {
                          "type": "integer",
                          "example": 3
                        },
                        "hasPreviousPage": {
                          "type": "boolean",
                          "example": false
                        },
                        "hasNextPage": {
                          "type": "boolean",
                          "example": true
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "Recipes"
        ],
        "summary": "Add recipe to favorites",
        "operationId": "addToFavorites",
        "description": "Adds a recipe to the user's favorites list. Returns a paginated, filtered, and sorted list of favorite recipes, ordered by the sequence in which they were added (newest first). Supports filtering by category, ingredient, and name, plus sorting by predefined fields.\n**Example request:** `POST http://localhost:3000/api/recipes/profile/favorites`\n",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "recipeId"
                ],
                "properties": {
                  "recipeId": {
                    "type": "string",
                    "description": "The ID of the recipe to add to favorites",
                    "pattern": "^[a-fd]{24}$",
                    "example": "6462a8f74c3d0ddd28898019"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "description": "Page number for pagination (default is 1)"
          },
          {
            "in": "query",
            "name": "perPage",
            "schema": {
              "type": "integer",
              "default": 12,
              "minimum": 1,
              "maximum": 50
            },
            "description": "Number of items per page (default is 12, max 50)"
          },
          {
            "in": "query",
            "name": "sortBy",
            "schema": {
              "type": "string",
              "enum": [
                "_id",
                "title",
                "cals",
                "time",
                "category",
                "createdAt",
                "updatedAt"
              ],
              "default": "createdAt"
            },
            "description": "Field to sort the favorite recipes by"
          },
          {
            "in": "query",
            "name": "sortOrder",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            },
            "description": "Sort order (ascending or descending)"
          },
          {
            "in": "query",
            "name": "category",
            "schema": {
              "type": "string"
            },
            "description": "Filter recipes by category (exact match)"
          },
          {
            "in": "query",
            "name": "ingredient",
            "schema": {
              "type": "string"
            },
            "description": "Filter recipes by ingredient name (partial match)"
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "Filter recipes by recipe title/name (partial match)"
          }
        ],
        "responses": {
          "200": {
            "description": "Recipe added to favorites",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Recipe added to favorites"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "recipes",
                        "page",
                        "perPage",
                        "totalItems",
                        "totalPages",
                        "hasPreviousPage",
                        "hasNextPage"
                      ],
                      "properties": {
                        "recipes": {
                          "type": "array",
                          "description": "List of favorite recipes in order of addition",
                          "items": {
                            "$ref": "#/components/schemas/recipe"
                          }
                        },
                        "page": {
                          "type": "integer",
                          "example": 1
                        },
                        "perPage": {
                          "type": "integer",
                          "example": 12
                        },
                        "totalItems": {
                          "type": "integer",
                          "example": 4
                        },
                        "totalPages": {
                          "type": "integer",
                          "example": 1
                        },
                        "hasPreviousPage": {
                          "type": "boolean",
                          "example": false
                        },
                        "hasNextPage": {
                          "type": "boolean",
                          "example": false
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Recipe ID is required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Recipe ID is required"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User or Recipe not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "User or Recipe not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/recipes/profile/favorites/{id}": {
      "delete": {
        "tags": [
          "Recipes"
        ],
        "summary": "Remove a recipe from favorites",
        "operationId": "removeFavorite",
        "description": "Deletes a recipe from the authenticated user's favorites list. Requires authentication.\nThe response returns the remaining favorite recipes with pagination, sorting, and filtering applied. The recipes are sorted in the exact order they are stored on the backend in the user's favorites list.\n",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the recipe to remove from favorites",
            "required": true,
            "schema": {
              "type": "string",
              "example": "60a7c0f2e13e3a3d9c1f1234"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination (default 1)",
            "required": false,
            "schema": {
              "type": "integer",
              "example": 1
            }
          },
          {
            "name": "perPage",
            "in": "query",
            "description": "Number of recipes per page (default 10)",
            "required": false,
            "schema": {
              "type": "integer",
              "example": 10
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Field to sort by (e.g., \"title\", \"createdAt\")",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt"
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "Sort order, either \"asc\" or \"desc\"",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "example": "asc"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "JSON string to filter recipes by fields",
            "required": false,
            "schema": {
              "type": "string",
              "example": "{\"category\": \"dessert\"}"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Recipe successfully removed from favorites",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Recipe removed from favorites successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "recipes": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/recipe"
                          }
                        },
                        "page": {
                          "type": "integer",
                          "example": 1
                        },
                        "perPage": {
                          "type": "integer",
                          "example": 10
                        },
                        "totalItems": {
                          "type": "integer",
                          "example": 25
                        },
                        "totalPages": {
                          "type": "integer",
                          "example": 3
                        },
                        "hasPreviousPage": {
                          "type": "boolean",
                          "example": false
                        },
                        "hasNextPage": {
                          "type": "boolean",
                          "example": true
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Recipe ID is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/400"
                }
              }
            }
          },
          "404": {
            "description": "User not found or Recipe not in favorites",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/404"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    },
    "schemas": {
      "400": {
        "description": "Bad request due to validation error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 400
                },
                "message": {
                  "oneOf": [
                    {
                      "type": "string",
                      "example": "ID should be an ObjectId"
                    },
                    {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": [
                          "\"email\" must be a valid email"
                        ]
                      }
                    }
                  ]
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "oneOf": [
                        {
                          "type": "string",
                          "example": "ID should be an ObjectId"
                        },
                        {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "example": [
                              "\"email\" must be a valid email"
                            ]
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "404": {
        "description": "The requested contact or route was not found",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 404
                },
                "message": {
                  "type": "string",
                  "example": "Contact not found"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Contact not found"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "user": {
        "type": "object",
        "required": [
          "_id",
          "name",
          "email",
          "createdAt",
          "updatedAt"
        ],
        "properties": {
          "_id": {
            "description": "User's id",
            "type": "string",
            "example": "65e4decdd286b30065d54af9"
          },
          "name": {
            "description": "User's name",
            "type": "string",
            "example": "John Doe"
          },
          "email": {
            "description": "User's email",
            "type": "string",
            "example": "john123@gmail.com"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "User's created date",
            "example": "2025-03-27T19:43:21.686+00:00"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "User's updated date",
            "example": "2025-03-27T19:43:21.686+00:00"
          }
        }
      },
      "category": {
        "type": "object",
        "required": [
          "_id",
          "name"
        ],
        "properties": {
          "_id": {
            "type": "string",
            "example": "665d14a36a70b4794fbcab12"
          },
          "name": {
            "type": "string",
            "example": "breakfast"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2024-06-01T12:00:00.000Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2024-06-01T12:30:00.000Z"
          }
        }
      },
      "ingredient": {
        "type": "object",
        "required": [
          "_id",
          "name",
          "desc",
          "img",
          "createdAt",
          "updatedAt"
        ],
        "properties": {
          "_id": {
            "type": "string",
            "example": "665d14a36a70b4794fbcab34"
          },
          "name": {
            "type": "string",
            "example": "Egg"
          },
          "desc": {
            "type": "string",
            "example": "A fresh organic egg"
          },
          "img": {
            "type": "string",
            "example": "https://example.com/images/egg.jpg"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2024-06-01T12:00:00.000Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2024-06-01T12:30:00.000Z"
          }
        }
      },
      "recipe": {
        "type": "object",
        "required": [
          "_id",
          "title",
          "category",
          "owner",
          "instructions",
          "description",
          "time",
          "ingredients"
        ],
        "properties": {
          "_id": {
            "type": "string",
            "example": "65d7e8a4b9c3d12a5d8e9b74"
          },
          "title": {
            "type": "string",
            "maxLength": 64,
            "example": "Chocolate Cake"
          },
          "category": {
            "type": "string",
            "example": "Dessert"
          },
          "owner": {
            "type": "string",
            "example": "65d123abc9876543210fedcb"
          },
          "area": {
            "type": "string",
            "example": "Italian"
          },
          "instructions": {
            "type": "string",
            "maxLength": 1200,
            "example": "Mix all ingredients and bake at 180°C for 35 minutes."
          },
          "description": {
            "type": "string",
            "maxLength": 200,
            "example": "Rich and moist cake perfect for celebrations."
          },
          "thumb": {
            "type": "string",
            "format": "uri",
            "example": "https://example.com/images/recipe.jpg"
          },
          "time": {
            "type": "string",
            "example": "90"
          },
          "cals": {
            "type": [
              "integer",
              "null"
            ],
            "minimum": 1,
            "maximum": 10000,
            "example": 320
          },
          "ingredients": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "ingredient",
                "measure"
              ],
              "properties": {
                "ingredient": {
                  "$ref": "#/components/schemas/ingredient"
                },
                "measure": {
                  "type": "string",
                  "example": "4 cups"
                }
              }
            }
          },
          "isFavorite": {
            "type": [
              "boolean",
              "null"
            ],
            "example": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2024-12-01T14:23:00Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2024-12-05T11:00:00Z"
          }
        },
        "example": {
          "_id": "6462a8f74c3d0ddd28898067",
          "title": "Steak Diane",
          "category": "Beef",
          "owner": "64c8d958249fae54bae90bb9",
          "area": "French",
          "instructions": "Heat oil in a 12 skillet over medium-high heat. Season steaks with salt and pepper, and add to skillet; cook, turning once, until browned on both sides and cooked to desired doneness, about 4 to 5 minutes for medium-rare. Transfer steaks to a plate, and set aside. Return skillet to high heat, and add stock; cook until reduced until to 1⁄2 cup, about 10 minutes. Pour into a bowl, and set aside. Return skillet to heat, and add butter; add garlic and shallots, and cook, stirring, until soft, about 2 minutes. Add mushrooms, and cook, stirring, until they release any liquid and it evaporates and mushrooms begin to brown, about 2 minutes. Add cognac, and light with a match to flambée; cook until flame dies down. Stir in reserved stock, cream, Dijon, Worcestershire, and hot sauce, and then return steaks to skillet; cook, turning in sauce, until warmed through and sauce is thickened, about 4 minutes. Transfer steak to serving plates and stir parsley and chives into sauce; pour sauce over steaks to serve.",
          "description": "A classic French dish made with pan-seared steak, served with a sauce made from butter, shallots, mushrooms, and cream, and flavored with brandy and Worcestershire sauce.",
          "thumb": "https://ftp.goit.study/img/so-yummy/preview/Steak%20Diane.jpg",
          "time": "30",
          "ingredients": [
            {
              "ingredient": {
                "_id": "640c2dd963a319ea671e3838",
                "name": "Canola Oil",
                "desc": "A type of vegetable oil made from the rapeseed plant, commonly used for cooking due to its mild flavor and high smoke point.",
                "img": "https://ftp.goit.study/img/so-yummy/ingredients/640c2dd963a319ea671e3838.png"
              },
              "measure": "2 tbs"
            }
          ],
          "isFavorite": false,
          "createdAt": "2023-03-11T19:25:33.244Z",
          "updatedAt": "2023-04-14T20:02:28.085Z"
        }
      }
    },
    "responses": {
      "400": {
        "description": "Bad request due to validation error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 400
                },
                "message": {
                  "oneOf": [
                    {
                      "type": "string",
                      "example": "ID should be an ObjectId"
                    },
                    {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": [
                          "\"email\" must be a valid email"
                        ]
                      }
                    }
                  ]
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "oneOf": [
                        {
                          "type": "string",
                          "example": "ID should be an ObjectId"
                        },
                        {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "example": [
                              "\"email\" must be a valid email"
                            ]
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "401": {
        "description": "Unauthorized - missing or invalid credentials, expired token, or session-related issue",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 401
                },
                "message": {
                  "type": "string",
                  "example": "Access token expired"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Access token expired"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "404": {
        "description": "The requested contact or route was not found",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 404
                },
                "message": {
                  "type": "string",
                  "example": "Contact not found"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Contact not found"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "409": {
        "description": "Conflict error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 409
                },
                "message": {
                  "type": "string",
                  "example": "ConflictError"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Email in use"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "500": {
        "description": "Internal Server Error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 500
                },
                "message": {
                  "type": "string",
                  "example": "Internal Server Error"
                }
              }
            }
          }
        }
      }
    }
  }
}